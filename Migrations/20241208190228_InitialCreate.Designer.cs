// <auto-generated />
using System;
using HealthCare.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCare.Migrations
{
    [DbContext(typeof(HealthCareDbContext))]
    [Migration("20241208190228_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCare.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationRequest");
                });

            modelBuilder.Entity("HealthCare.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("HealthCare.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HealthConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("int");

                    b.Property<int>("UpdatesExecuted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("UpdatesExecuted");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("HealthCare.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SequencialNumber")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("HealthCare.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRequest")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HealthCare.Domain.OperationTypes.OperationType", b =>
                {
                    b.OwnsMany("HealthCare.Domain.OperationTypes.OperationTypeVersion", "Versions", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("Ending")
                                .HasColumnType("datetime2");

                            b1.Property<string>("OperationTypeId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("Starting")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("OperationTypeId");

                            b1.ToTable("OperationTypeVersion");

                            b1.WithOwner()
                                .HasForeignKey("OperationTypeId");

                            b1.OwnsOne("HealthCare.Domain.OperationTypes.OperationTypeDuration", "Duration", b2 =>
                                {
                                    b2.Property<string>("OperationTypeVersionId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Cleaning")
                                        .HasColumnType("int");

                                    b2.Property<int>("Operation")
                                        .HasColumnType("int");

                                    b2.Property<int>("Preparation")
                                        .HasColumnType("int");

                                    b2.HasKey("OperationTypeVersionId");

                                    b2.ToTable("OperationTypeVersion");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationTypeVersionId");
                                });

                            b1.OwnsMany("HealthCare.Domain.OperationTypes.OperationTypeSpecialization", "Specializations", b2 =>
                                {
                                    b2.Property<string>("OperationTypeVersionId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("Id")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int");

                                    b2.Property<int>("Role")
                                        .HasColumnType("int");

                                    b2.Property<int>("Specialization")
                                        .HasColumnType("int");

                                    b2.HasKey("OperationTypeVersionId", "Id");

                                    b2.ToTable("OperationTypeSpecialization");

                                    b2.WithOwner()
                                        .HasForeignKey("OperationTypeVersionId");
                                });

                            b1.Navigation("Duration");

                            b1.Navigation("Specializations");
                        });

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("HealthCare.Domain.Patients.Patient", b =>
                {
                    b.HasOne("HealthCare.Domain.Users.User", "User")
                        .WithOne("PatientProfile")
                        .HasForeignKey("HealthCare.Domain.Patients.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("HealthCare.Domain.Patients.PatientPhone", "EmergencyPhone", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("EmergencyPhone");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("HealthCare.Domain.Patients.PatientPhone", "Phone", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("Phone");

                            b1.HasKey("PatientId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("[Phone] IS NOT NULL");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("HealthCare.Domain.Patients.PatientEmail", "Email", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("PatientId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasFilter("[EmailAddress] IS NOT NULL");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("HealthCare.Domain.Staffs.PatientMedicalRecordNumber", "MedicalRecordNumber", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MedicalRecordNumber");

                            b1.HasKey("PatientId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasFilter("[MedicalRecordNumber] IS NOT NULL");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Email");

                    b.Navigation("EmergencyPhone");

                    b.Navigation("MedicalRecordNumber");

                    b.Navigation("Phone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCare.Domain.Staffs.Staff", b =>
                {
                    b.HasOne("HealthCare.Domain.Users.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("HealthCare.Domain.Staffs.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("HealthCare.Domain.Shared.TimeSlot.TimeSlot", "AvailabilitySlots", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("Ending")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("Starting")
                                .HasColumnType("datetime2");

                            b1.HasKey("StaffId", "Id");

                            b1.ToTable("TimeSlot");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("HealthCare.Domain.Staffs.StaffEmail", "Email", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("[Email_Value] IS NOT NULL");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("HealthCare.Domain.Staffs.StaffLicenseNumber", "LicenseNumber", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasFilter("[LicenseNumber_Number] IS NOT NULL");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("HealthCare.Domain.Staffs.StaffPhone", "Phone", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasFilter("[Phone_Value] IS NOT NULL");

                            b1.ToTable("Staffs");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.Navigation("AvailabilitySlots");

                    b.Navigation("Email");

                    b.Navigation("LicenseNumber");

                    b.Navigation("Phone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthCare.Domain.Users.User", b =>
                {
                    b.OwnsOne("HealthCare.Domain.Users.UserEmail", "Email", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("HealthCare.Domain.Users.UserPassword", "PasswordHash", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("PasswordHash");
                });

            modelBuilder.Entity("HealthCare.Domain.Users.User", b =>
                {
                    b.Navigation("PatientProfile");

                    b.Navigation("StaffProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
